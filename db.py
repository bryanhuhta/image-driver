from typing import NamedTuple, Optional
import random
import sqlite3
import time
import numpy as np


class Metadata(NamedTuple):
    id:                         Optional[int] = None
    number:                     Optional[int] = None
    date:                       Optional[str] = None
    group:                      Optional[int] = None
    special_chars:              Optional[str] = None
    image_index:                Optional[int] = None
    subimage_index:             Optional[int] = None
    grayscale:                  Optional[bool] = None
    is_used:                    Optional[bool] = None
    is_nobirdlikely:            Optional[bool] = None
    is_bird:                    Optional[bool] = None
    special_name:               Optional[bool] = None
    is_present:                 Optional[bool] = None


class Database:
    def __init__(self, path: str):
        self._path = path
        self._conn = None

    def __enter__(self):
        self._conn = sqlite3.connect(self._path)
        c = self._conn.cursor()
        c.execute('''
            CREATE TABLE IF NOT EXISTS metadata (
                id                      INTEGER PRIMARY KEY NOT NULL,
                number                  INTEGER NOT NULL,
                date                    TEXT NOT NULL,
                "group"                 INTEGER NOT NULL,
                special_chars           TEXT NOT NULL,
                image_index             INTEGER NOT NULL,
                subimage_index          INTEGER NOT NULL,
                grayscale               INTEGER NOT NULL,
                is_used                 INTEGER NOT NULL,
                is_nobirdlikely         INTEGER NOT NULL,
                is_bird                 INTEGER NOT NULL,
                special_name            INTEGER NOT NULL,
                is_present              INTEGER NOT NULL
            )
        ''')
        self._conn.commit()
        return self

    def __exit__(self, type, value, traceback):
        self._conn.commit()
        self._conn.close()

    def add(self, m: Metadata) -> Metadata:
        c = self._conn.cursor()
        # Insert everything but the id, it's generated by the database.
        c.execute('''
            INSERT INTO metadata (
                number,
                date,
                "group",
                special_chars,
                image_index,
                subimage_index,
                grayscale,
                is_used,
                is_nobirdlikely,
                is_bird,
                special_name,
                is_present
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', m[1:])
        return self.get(c.lastrowid)

    def get(self, id: int) -> Metadata:
        c = self._conn.cursor()
        c.execute('''
            SELECT
                id,
                number,
                date,
                "group",
                special_chars,
                image_index,
                subimage_index,
                grayscale,
                is_used,
                is_nobirdlikely,
                is_bird,
                special_name,
                is_present
            FROM
                metadata
            WHERE
                id = ?
        ''', (id,))
        return Metadata(*c.fetchone())

    def update(self, id: int, m: Metadata) -> Metadata:
        c = self._conn.cursor()
        # Dynamically build sql query to do an update.
        sql = '''UPDATE metadata SET {} WHERE id = ?'''.format(",".join([
            f'{k}={v}'
            for k, v
            in m._asdict().items()
            if k != 'id' and v is not None  # Don't update the primary key.
        ]))
        c.execute(sql, (id,))
        return self.get(c.lastrowid)

    def delete(self, id: int) -> None:
        c = self._conn.cursor()
        c.execute('''DELETE FROM metadata WHERE id = ?''', (id,))
